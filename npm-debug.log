0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files (x86)\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.32
4 verbose node symlink C:\Program Files (x86)\nodejs\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\Alex\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\Alex\\AppData\\Roaming\\npm-cache\\domtest\\0.10.10\\package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package.tgz
13 verbose folder .
14 info prepublish domtest@0.10.10
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\Alex\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile 5a90d96a-ache-domtest-0-10-10-package-tgz tar://C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package.tgz
18 verbose lock tar://C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package.tgz C:\Users\Alex\AppData\Roaming\npm-cache\5a90d96a-ache-domtest-0-10-10-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 5a90d96a-ache-domtest-0-10-10-package-tgz tar://C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package.tgz
22 silly lockFile 5a90d96a-ache-domtest-0-10-10-package-tgz tar://C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package.tgz
23 silly lockFile 71ff792f-pm-cache-domtest-0-10-10-package C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package
24 verbose lock C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package C:\Users\Alex\AppData\Roaming\npm-cache\71ff792f-pm-cache-domtest-0-10-10-package.lock
25 silly lockFile 71ff792f-pm-cache-domtest-0-10-10-package C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package
26 silly lockFile 71ff792f-pm-cache-domtest-0-10-10-package C:\Users\Alex\AppData\Roaming\npm-cache\domtest\0.10.10\package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'domtest',
29 silly publish   description: 'Helps to perform unit and integration testing on documents and elements',
29 silly publish   version: '0.10.10',
29 silly publish   contributors: [],
29 silly publish   main: './lib/domtest.js',
29 silly publish   author: { name: 'Alexander Kit', email: 'alex.kit@atmajs.com' },
29 silly publish   repository: { type: 'git', url: 'https://github.com/atmajs/domtest.git' },
29 silly publish   bugs: { url: 'https://github.com/atmajs/domtest/issues' },
29 silly publish   licenses: [ 'MIT' ],
29 silly publish   devDependencies: { atma: '>0.9.26', 'atma-loader-traceur': '>0.0.0' },
29 silly publish   scripts: { test: 'atma test', build: 'atma' },
29 silly publish   keywords: [ 'dom assertions' ],
29 silly publish   atma:
29 silly publish    { plugins: [ 'atma-loader-traceur' ],
29 silly publish      settings: { 'atma-loader-traceur': [Object] } },
29 silly publish   readme: '## DomTest\r\n\r\n[![Build Status](https://travis-ci.org/atmajs/domtest.png?branch=master)](https://travis-ci.org/atmajs/domtest)\r\n[![NPM version](https://badge.fury.io/js/domtest.svg)](http://badge.fury.io/js/domtest)\r\n[![Bower version](https://badge.fury.io/bo/domtest.svg)](http://badge.fury.io/bo/domtest)\r\n\r\nDescribe DOM Tests with ease, less code, and less words. Based on `MaskJS` syntax, `jQuery`s API and user input simulations. _Unit-test the UI, but also perfect for integration tests_.\r\n> This is not the test runner, you may want to use one, like `Karma`\r\n\r\n\r\n##### Sample\r\nAssume this DOM\r\n```html\r\n<div class=\'foo baz\' onclick="this.style.display = \'none\'">Foo</div>\r\n<input value=\'A\' />\r\n```\r\nTest suite sample:\r\n```mask\r\nfind (.foo)  {\r\n\ttext Foo;\r\n\thasClass baz;\r\n\tclick;\r\n\tcss display none;\r\n}\r\nfind (input) {\r\n\tval A;\r\n\tpress backspace;\r\n\t\r\n\ttype Baz ;\r\n\tval Baz;\r\n}\r\n```\r\n\r\n- [Install](#install)\r\n- [API](#api)\r\n- [Syntax](#syntax)\r\n- [Assertions](#assertions)\r\n- [Traverse](#traverse)\r\n- [Simulation](#simulation)\r\n- [Debugging](#debugging)\r\n- [Async](#async)\r\n- [Manipulation](#manipulation)\r\n- [Javascript](#javascript)\r\n- [Examples](#examples)\r\n\r\n### Install\r\n\r\n```bash\r\nbower install domtest\r\n# this also downloads `maskjs` and `jquery` libraries to `bower_components`\r\n```\r\n\r\n### API\r\n\r\n- DomTest\r\n\t\r\n\t```javascript\r\n\tDomTest(Element: Node, MaskTestSuite: String): IEventEmitter<Runner>\r\n\t```\r\n\t\r\n\t#### Runner\r\n\t- `.on(event, handler)`\r\n\t\t\r\n\t\t| Event | Data | Description |\r\n\t\t|--------|-----------| ------------|\r\n\t\t| `fail`  | `error: AssertionError` | Failed assertion |\r\n\t\t| `success`| - | Successful assertion |\r\n\t\t| `progress` | `runner:Runner, node: MaskNode, error:AssertionError` | After each step. `error` is null, when assertion is ok |\r\n\t\t| `complete` | `errors:Array<AssertionError>` | Runner has finished all tests |\r\n\t\t\r\n\t- `.off(event, handler)`\r\n\t\r\n\r\n- Component test _(For [MaskJS](https://github.com/atmajs/maskjs) users)_\r\n\r\n\tIf you use MaskJS for the application, it simplifies component and template testings\r\n\t\r\n\t```javascript\r\n\tDomTest.compo(template, ?model): IEventEmitter<Runner>\r\n\t```\r\n\t_E.g._\r\n\t```javascript\r\n\tDomTest.compo(`\r\n\t\tsection #content {\r\n\t\t\t:profile;\r\n\t\t}\r\n\t\t:utest {\r\n\t\t\t// binding test\r\n\t\t\twith (input.profile-name) >\r\n\t\t\t\ttype FooName;\r\n\t\t\twith (model) {\r\n\t\t\t\tname FooName;\r\n\t\t\t}\r\n\t\t}\r\n\t`);\r\n\t```\r\n\t\r\n\r\n\r\n### Syntax\r\n\r\n_Refer to the MaskJS syntax spec._\r\n\r\nEach node performs some action: `assertion`, `manipulation`, etc.\r\n\r\n### Assertions\r\n\r\njQuery property of the current set is used, and in case if the property is the function, than the functions result is used for the assertion.\r\n\r\n| assertionFunction      | Description |\r\n|------------------------|-------------|\r\n| `eq`, `notEq`          | Equal(Not Equal) check |\r\n| `deepEq`, `notDeepEq`  | Objects and Arrays comparison |\r\n| `has`, `hasNot`        | Check for a substring, check children by selector, check sub object existance |\r\n| `lt`, `lte`\t\t\t | Less-Than, Less-Than-Or-Equal |\r\n| `gt`, `gte`\t\t\t | Greater-Than, Greater-Than-Or-Equal |\r\n\r\n\r\n```mask\r\nassertionFunction (jqueryAccessor, [...arguments], testValue);\r\n\r\neq(\'text\', \'Bar\');\r\n//js counterpart: assert.equal($set.text(), \'Bar\');\r\n\r\neq(\'length\', 1);\r\n//js counterpart: assert.equal($set.length, 1);\r\n\r\neq(\'attr\', \'id\', \'Foo\');\r\n//js counterpart: assert.equal($set.attr(\'id\'), \'Bar\');\r\n```\r\n\r\nSimplified syntax:\r\n```mask\r\nassertionFunction jqueryAccessor [...arguments] testValue;\r\n\r\neq text Bar;\r\neq length 1;\r\neq attr id Foo;\r\n```\r\n\r\n`eq` is the default assertion and can be omitted\r\n```mask\r\njqueryAccessor [...arguments] testValue\r\n\r\ntext Bar;\r\nlength 1;\r\nattr id Foo;\r\n```\r\n\r\n\r\n\r\n### Traverse\r\n\r\n_Refer to jQuery traverse functions._\r\n\r\n- `find` (_alias_ `with`), `children`, `closest`, `siblings`, `parent`, `eq`, `filter`, `first`, `last`, `next`, `nextAll`, `nextUntil`, `prev`, `prevAll`, `prevUntil`\r\n\r\nAll assertions, like all other actions, are called in a current jQuery context. From the start on this is equal to the root element(s) (_see the `DomTest` function_).\r\nWith the traverse functions you select new elements for the current context. They will throw also an error if no elements can\'t be found.\r\n\r\n```mask\r\ntraverseFunction (selector) {\r\n\t// ... assertoions, etc\r\n}\r\n```\r\nExample:\r\n```mask\r\nfind (div > span) {\r\n\tdata id Foo;\r\n\t\r\n\t// nesting example\r\n\tfind (em) {\r\n\t\ttext Foo;\r\n\t}\r\n}\r\n```\r\n\r\n\t\r\n\r\n### Simulation\r\n\r\n\r\nTriggers an event or simulates user interaction\r\n\r\n```mask\r\ndo ActionName (...arguments);\r\n```\r\n\r\n> All DOM and Simulations could be triggered without the keyword `do`\r\n\r\nExamples:\r\n```\r\ndo customFooEvent;\r\ndo click; // or just\r\nclick;\r\n// simulate press (_also combinations_)\r\npress (\'ctrl+c\');\r\n// simulate user type\r\ndo type (\'Hello World\');\r\n```\r\n\r\n- Dom events\r\n\t`mousemove`, `mousedown`, `mouseup`, `click`, `dblclick`, `mouseover`, `mouseout`, `mouseenter`, `mouseleave`, `contextmenu`\r\n\r\n- Simulate\r\n\r\n\t| Action | Arguments | Description |\r\n\t|--------|-----------| ------------|\r\n\t|`press` | (Char/String)  | Press a key or combination. Letters are case sensitive |\r\n\t|`type`  | (String) | Simulate user typing |\r\n\t|`select`| (String) <br/> (start, end) | `SELECT NODE`: Search for an option by text or attribute(`value`, `name`, `id`) and select this <br /> `INPUT/TEXTAREA NODE`: Selects the text/range|\r\n\t\r\n\r\n### Debugging\r\n`debugger`: stop on some element(s) to inspect them in developer tools:\r\n```mask\r\nchildren (li) {\r\n\tdebugger;\r\n}\r\n```\r\n\r\n\r\n### Async\r\n`async`: wait some time or wait until some element appears in the dom.\r\nFor instance, when there is some async calls after button click action\r\n```mask\r\nawait (selector);\r\nawait (number);\r\n```\r\n\r\nExample:\r\n```\r\nfind (\'button.show-about\') > click;\r\nawait(\'section.about\') {\r\n    has html Credits;\r\n}\r\n```\r\n\r\n### Manipulation\r\n`call`: call a jQuery function to modify current elemens\r\n> _rarely used_, as usually all dom modifications are performed within some handlers\r\n\r\n```mask\r\ncall text(\'Foo\'); // or simpler(no whitespace in the text)\r\ncall text Foo\r\n// This sets textContent to \'Foo\' (not the assertion)\r\n```\r\n\r\n### Javascript\r\n`slot`: is an embedded javascript block to execute. _Can cover any need_\r\n```javascript\r\n// sync version\r\nslot name ($ctx, assert) { /*...*/ }\r\n\r\n// async version\r\nslot name ($ctx, assert, done) {/*...*/}\r\n\r\nfind (input) {\r\n\tslot checkFoo ($input, assert) {\r\n\t\t// just a simple js demo\r\n\t\tvar foo = someFooFunction($input);\r\n\t\tassert.equal(foo, 3)\r\n\t}\r\n}\r\n```\r\n\r\n### Examples\r\n[/examples](./examples)\r\n\r\n```bash\r\n# install dependencies\r\nbower install \r\n\r\n# run local static server\r\nnpm install -g atma\r\natma server\r\n\r\n# navigate to e.g. `http://localhost:5777/examples/standalone.html`\r\n```\r\n\r\n\r\n### Contribute\r\n#### Build\r\n```bash\r\n$ npm install\r\n$ bower install\r\n$ git submodule update --recursive\r\n$ npm build\r\n```\r\n\r\n#### Test\r\n```bash\r\nnpm test\r\n```\r\n\r\n----\r\n\r\nCredits to:\r\n- [jQuery-Simulate](https://github.com/jquery/jquery-simulate)\r\n- [jQuery-Simulate-Ext](https://github.com/j-ulrich/jquery-simulate-ext)\r\n\r\n----\r\n\r\n:copyright: MIT _The AtmaJS Project_',
29 silly publish   readmeFilename: 'readme.md',
29 silly publish   gitHead: '1e061fa4d2e1128f4cd8d7bf08a7382787264a9e',
29 silly publish   homepage: 'https://github.com/atmajs/domtest',
29 silly publish   _id: 'domtest@0.10.10',
29 silly publish   _shasum: '61b50d26d8452ebe605e43177b7ce9b98a7dab40',
29 silly publish   _from: '.' }
30 verbose request where is /domtest
31 verbose request registry http://registry.npmjs.org/
32 verbose request id 86e5d482ccf903a1
33 verbose url raw /domtest
34 verbose url resolving [ 'http://registry.npmjs.org/', './domtest' ]
35 verbose url resolved http://registry.npmjs.org/domtest
36 verbose request where is http://registry.npmjs.org/domtest
37 info trying registry request attempt 1 at 20:56:42
38 http PUT http://registry.npmjs.org/domtest
39 http 403 http://registry.npmjs.org/domtest
40 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '14009',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   date: 'Thu, 19 Mar 2015 19:56:49 GMT',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   connection: 'keep-alive',
40 verbose headers   'x-served-by': 'cache-ams4141-AMS',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1426795008.220760,VS0,VE966' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.10.10
42 error old={"name":"domtest","description":"Helps to perform unit and integration testing on documents and elements","version":"0.10.10","contributors":[],"main":"./lib/domtest.js","author":{"name":"Alexander Kit","email":"alex.kit@atmajs.com"},"repository":{"type":"git","url":"https://github.com/atmajs/domtest.git"},"bugs":{"url":"https://github.com/atmajs/domtest/issues"},"licenses":["MIT"],"devDependencies":{"atma":">0.9.26","atma-loader-traceur":">0.0.0"},"scripts":{"test":"atma test","build":"atma"},"keywords":["dom assertions"],"atma":{"plugins":["atma-loader-traceur"],"settings":{"atma-loader-traceur":{"extensions":["test","es6"]}}},"gitHead":"cc3d8b72192e2da314d42231515d17aec8817207","homepage":"https://github.com/atmajs/domtest","_id":"domtest@0.10.10","_shasum":"32766c436711838dce172efa7df431f74daafcad","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"tenbits","email":"alex.kit@atmajs.com"},"maintainers":[{"name":"tenbits","email":"alex.kit@atmajs.com"}],"dist":{"shasum":"32766c436711838dce172efa7df431f74daafcad","tarball":"http://registry.npmjs.org/domtest/-/domtest-0.10.10.tgz"}}
42 error new={"name":"domtest","description":"Helps to perform unit and integration testing on documents and elements","version":"0.10.10","contributors":[],"main":"./lib/domtest.js","author":{"name":"Alexander Kit","email":"alex.kit@atmajs.com"},"repository":{"type":"git","url":"https://github.com/atmajs/domtest.git"},"bugs":{"url":"https://github.com/atmajs/domtest/issues"},"licenses":["MIT"],"devDependencies":{"atma":">0.9.26","atma-loader-traceur":">0.0.0"},"scripts":{"test":"atma test","build":"atma"},"keywords":["dom assertions"],"atma":{"plugins":["atma-loader-traceur"],"settings":{"atma-loader-traceur":{"extensions":["test","es6"]}}},"readme":"## DomTest\u000d\u000a\u000d\u000a[![Build Status](https://travis-ci.org/atmajs/domtest.png?branch=master)](https://travis-ci.org/atmajs/domtest)\u000d\u000a[![NPM version](https://badge.fury.io/js/domtest.svg)](http://badge.fury.io/js/domtest)\u000d\u000a[![Bower version](https://badge.fury.io/bo/domtest.svg)](http://badge.fury.io/bo/domtest)\u000d\u000a\u000d\u000aDescribe DOM Tests with ease, less code, and less words. Based on `MaskJS` syntax, `jQuery`s API and user input simulations. _Unit-test the UI, but also perfect for integration tests_.\u000d\u000a> This is not the test runner, you may want to use one, like `Karma`\u000d\u000a\u000d\u000a\u000d\u000a##### Sample\u000d\u000aAssume this DOM\u000d\u000a```html\u000d\u000a<div class='foo baz' onclick=\"this.style.display = 'none'\">Foo</div>\u000d\u000a<input value='A' />\u000d\u000a```\u000d\u000aTest suite sample:\u000d\u000a```mask\u000d\u000afind (.foo)  {\u000d\u000a\u0009text Foo;\u000d\u000a\u0009hasClass baz;\u000d\u000a\u0009click;\u000d\u000a\u0009css display none;\u000d\u000a}\u000d\u000afind (input) {\u000d\u000a\u0009val A;\u000d\u000a\u0009press backspace;\u000d\u000a\u0009\u000d\u000a\u0009type Baz ;\u000d\u000a\u0009val Baz;\u000d\u000a}\u000d\u000a```\u000d\u000a\u000d\u000a- [Install](#install)\u000d\u000a- [API](#api)\u000d\u000a- [Syntax](#syntax)\u000d\u000a- [Assertions](#assertions)\u000d\u000a- [Traverse](#traverse)\u000d\u000a- [Simulation](#simulation)\u000d\u000a- [Debugging](#debugging)\u000d\u000a- [Async](#async)\u000d\u000a- [Manipulation](#manipulation)\u000d\u000a- [Javascript](#javascript)\u000d\u000a- [Examples](#examples)\u000d\u000a\u000d\u000a### Install\u000d\u000a\u000d\u000a```bash\u000d\u000abower install domtest\u000d\u000a# this also downloads `maskjs` and `jquery` libraries to `bower_components`\u000d\u000a```\u000d\u000a\u000d\u000a### API\u000d\u000a\u000d\u000a- DomTest\u000d\u000a\u0009\u000d\u000a\u0009```javascript\u000d\u000a\u0009DomTest(Element: Node, MaskTestSuite: String): IEventEmitter<Runner>\u000d\u000a\u0009```\u000d\u000a\u0009\u000d\u000a\u0009#### Runner\u000d\u000a\u0009- `.on(event, handler)`\u000d\u000a\u0009\u0009\u000d\u000a\u0009\u0009| Event | Data | Description |\u000d\u000a\u0009\u0009|--------|-----------| ------------|\u000d\u000a\u0009\u0009| `fail`  | `error: AssertionError` | Failed assertion |\u000d\u000a\u0009\u0009| `success`| - | Successful assertion |\u000d\u000a\u0009\u0009| `progress` | `runner:Runner, node: MaskNode, error:AssertionError` | After each step. `error` is null, when assertion is ok |\u000d\u000a\u0009\u0009| `complete` | `errors:Array<AssertionError>` | Runner has finished all tests |\u000d\u000a\u0009\u0009\u000d\u000a\u0009- `.off(event, handler)`\u000d\u000a\u0009\u000d\u000a\u000d\u000a- Component test _(For [MaskJS](https://github.com/atmajs/maskjs) users)_\u000d\u000a\u000d\u000a\u0009If you use MaskJS for the application, it simplifies component and template testings\u000d\u000a\u0009\u000d\u000a\u0009```javascript\u000d\u000a\u0009DomTest.compo(template, ?model): IEventEmitter<Runner>\u000d\u000a\u0009```\u000d\u000a\u0009_E.g._\u000d\u000a\u0009```javascript\u000d\u000a\u0009DomTest.compo(`\u000d\u000a\u0009\u0009section #content {\u000d\u000a\u0009\u0009\u0009:profile;\u000d\u000a\u0009\u0009}\u000d\u000a\u0009\u0009:utest {\u000d\u000a\u0009\u0009\u0009// binding test\u000d\u000a\u0009\u0009\u0009with (input.profile-name) >\u000d\u000a\u0009\u0009\u0009\u0009type FooName;\u000d\u000a\u0009\u0009\u0009with (model) {\u000d\u000a\u0009\u0009\u0009\u0009name FooName;\u000d\u000a\u0009\u0009\u0009}\u000d\u000a\u0009\u0009}\u000d\u000a\u0009`);\u000d\u000a\u0009```\u000d\u000a\u0009\u000d\u000a\u000d\u000a\u000d\u000a### Syntax\u000d\u000a\u000d\u000a_Refer to the MaskJS syntax spec._\u000d\u000a\u000d\u000aEach node performs some action: `assertion`, `manipulation`, etc.\u000d\u000a\u000d\u000a### Assertions\u000d\u000a\u000d\u000ajQuery property of the current set is used, and in case if the property is the function, than the functions result is used for the assertion.\u000d\u000a\u000d\u000a| assertionFunction      | Description |\u000d\u000a|------------------------|-------------|\u000d\u000a| `eq`, `notEq`          | Equal(Not Equal) check |\u000d\u000a| `deepEq`, `notDeepEq`  | Objects and Arrays comparison |\u000d\u000a| `has`, `hasNot`        | Check for a substring, check children by selector, check sub object existance |\u000d\u000a| `lt`, `lte`\u0009\u0009\u0009 | Less-Than, Less-Than-Or-Equal |\u000d\u000a| `gt`, `gte`\u0009\u0009\u0009 | Greater-Than, Greater-Than-Or-Equal |\u000d\u000a\u000d\u000a\u000d\u000a```mask\u000d\u000aassertionFunction (jqueryAccessor, [...arguments], testValue);\u000d\u000a\u000d\u000aeq('text', 'Bar');\u000d\u000a//js counterpart: assert.equal($set.text(), 'Bar');\u000d\u000a\u000d\u000aeq('length', 1);\u000d\u000a//js counterpart: assert.equal($set.length, 1);\u000d\u000a\u000d\u000aeq('attr', 'id', 'Foo');\u000d\u000a//js counterpart: assert.equal($set.attr('id'), 'Bar');\u000d\u000a```\u000d\u000a\u000d\u000aSimplified syntax:\u000d\u000a```mask\u000d\u000aassertionFunction jqueryAccessor [...arguments] testValue;\u000d\u000a\u000d\u000aeq text Bar;\u000d\u000aeq length 1;\u000d\u000aeq attr id Foo;\u000d\u000a```\u000d\u000a\u000d\u000a`eq` is the default assertion and can be omitted\u000d\u000a```mask\u000d\u000ajqueryAccessor [...arguments] testValue\u000d\u000a\u000d\u000atext Bar;\u000d\u000alength 1;\u000d\u000aattr id Foo;\u000d\u000a```\u000d\u000a\u000d\u000a\u000d\u000a\u000d\u000a### Traverse\u000d\u000a\u000d\u000a_Refer to jQuery traverse functions._\u000d\u000a\u000d\u000a- `find` (_alias_ `with`), `children`, `closest`, `siblings`, `parent`, `eq`, `filter`, `first`, `last`, `next`, `nextAll`, `nextUntil`, `prev`, `prevAll`, `prevUntil`\u000d\u000a\u000d\u000aAll assertions, like all other actions, are called in a current jQuery context. From the start on this is equal to the root element(s) (_see the `DomTest` function_).\u000d\u000aWith the traverse functions you select new elements for the current context. They will throw also an error if no elements can't be found.\u000d\u000a\u000d\u000a```mask\u000d\u000atraverseFunction (selector) {\u000d\u000a\u0009// ... assertoions, etc\u000d\u000a}\u000d\u000a```\u000d\u000aExample:\u000d\u000a```mask\u000d\u000afind (div > span) {\u000d\u000a\u0009data id Foo;\u000d\u000a\u0009\u000d\u000a\u0009// nesting example\u000d\u000a\u0009find (em) {\u000d\u000a\u0009\u0009text Foo;\u000d\u000a\u0009}\u000d\u000a}\u000d\u000a```\u000d\u000a\u000d\u000a\u0009\u000d\u000a\u000d\u000a### Simulation\u000d\u000a\u000d\u000a\u000d\u000aTriggers an event or simulates user interaction\u000d\u000a\u000d\u000a```mask\u000d\u000ado ActionName (...arguments);\u000d\u000a```\u000d\u000a\u000d\u000a> All DOM and Simulations could be triggered without the keyword `do`\u000d\u000a\u000d\u000aExamples:\u000d\u000a```\u000d\u000ado customFooEvent;\u000d\u000ado click; // or just\u000d\u000aclick;\u000d\u000a// simulate press (_also combinations_)\u000d\u000apress ('ctrl+c');\u000d\u000a// simulate user type\u000d\u000ado type ('Hello World');\u000d\u000a```\u000d\u000a\u000d\u000a- Dom events\u000d\u000a\u0009`mousemove`, `mousedown`, `mouseup`, `click`, `dblclick`, `mouseover`, `mouseout`, `mouseenter`, `mouseleave`, `contextmenu`\u000d\u000a\u000d\u000a- Simulate\u000d\u000a\u000d\u000a\u0009| Action | Arguments | Description |\u000d\u000a\u0009|--------|-----------| ------------|\u000d\u000a\u0009|`press` | (Char/String)  | Press a key or combination. Letters are case sensitive |\u000d\u000a\u0009|`type`  | (String) | Simulate user typing |\u000d\u000a\u0009|`select`| (String) <br/> (start, end) | `SELECT NODE`: Search for an option by text or attribute(`value`, `name`, `id`) and select this <br /> `INPUT/TEXTAREA NODE`: Selects the text/range|\u000d\u000a\u0009\u000d\u000a\u000d\u000a### Debugging\u000d\u000a`debugger`: stop on some element(s) to inspect them in developer tools:\u000d\u000a```mask\u000d\u000achildren (li) {\u000d\u000a\u0009debugger;\u000d\u000a}\u000d\u000a```\u000d\u000a\u000d\u000a\u000d\u000a### Async\u000d\u000a`async`: wait some time or wait until some element appears in the dom.\u000d\u000aFor instance, when there is some async calls after button click action\u000d\u000a```mask\u000d\u000aawait (selector);\u000d\u000aawait (number);\u000d\u000a```\u000d\u000a\u000d\u000aExample:\u000d\u000a```\u000d\u000afind ('button.show-about') > click;\u000d\u000aawait('section.about') {\u000d\u000a    has html Credits;\u000d\u000a}\u000d\u000a```\u000d\u000a\u000d\u000a### Manipulation\u000d\u000a`call`: call a jQuery function to modify current elemens\u000d\u000a> _rarely used_, as usually all dom modifications are performed within some handlers\u000d\u000a\u000d\u000a```mask\u000d\u000acall text('Foo'); // or simpler(no whitespace in the text)\u000d\u000acall text Foo\u000d\u000a// This sets textContent to 'Foo' (not the assertion)\u000d\u000a```\u000d\u000a\u000d\u000a### Javascript\u000d\u000a`slot`: is an embedded javascript block to execute. _Can cover any need_\u000d\u000a```javascript\u000d\u000a// sync version\u000d\u000aslot name ($ctx, assert) { /*...*/ }\u000d\u000a\u000d\u000a// async version\u000d\u000aslot name ($ctx, assert, done) {/*...*/}\u000d\u000a\u000d\u000afind (input) {\u000d\u000a\u0009slot checkFoo ($input, assert) {\u000d\u000a\u0009\u0009// just a simple js demo\u000d\u000a\u0009\u0009var foo = someFooFunction($input);\u000d\u000a\u0009\u0009assert.equal(foo, 3)\u000d\u000a\u0009}\u000d\u000a}\u000d\u000a```\u000d\u000a\u000d\u000a### Examples\u000d\u000a[/examples](./examples)\u000d\u000a\u000d\u000a```bash\u000d\u000a# install dependencies\u000d\u000abower install \u000d\u000a\u000d\u000a# run local static server\u000d\u000anpm install -g atma\u000d\u000aatma server\u000d\u000a\u000d\u000a# navigate to e.g. `http://localhost:5777/examples/standalone.html`\u000d\u000a```\u000d\u000a\u000d\u000a\u000d\u000a### Contribute\u000d\u000a#### Build\u000d\u000a```bash\u000d\u000a$ npm install\u000d\u000a$ bower install\u000d\u000a$ git submodule update --recursive\u000d\u000a$ npm build\u000d\u000a```\u000d\u000a\u000d\u000a#### Test\u000d\u000a```bash\u000d\u000anpm test\u000d\u000a```\u000d\u000a\u000d\u000a----\u000d\u000a\u000d\u000aCredits to:\u000d\u000a- [jQuery-Simulate](https://github.com/jquery/jquery-simulate)\u000d\u000a- [jQuery-Simulate-Ext](https://github.com/j-ulrich/jquery-simulate-ext)\u000d\u000a\u000d\u000a----\u000d\u000a\u000d\u000a:copyright: MIT _The AtmaJS Project_","readmeFilename":"readme.md","gitHead":"1e061fa4d2e1128f4cd8d7bf08a7382787264a9e","homepage":"https://github.com/atmajs/domtest","_id":"domtest@0.10.10","_shasum":"61b50d26d8452ebe605e43177b7ce9b98a7dab40","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"tenbits","email":"alex.kit@atmajs.com"},"maintainers":[{"name":"tenbits","email":"alex.kit@atmajs.com"}],"dist":{"shasum":"61b50d26d8452ebe605e43177b7ce9b98a7dab40","tarball":"http://registry.npmjs.org/domtest/-/domtest-0.10.10.tgz"}}: domtest
42 error     at RegClient.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:308:14)
42 error     at Request._callback (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:246:65)
42 error     at Request.self.callback (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (C:\Program Files (x86)\nodejs\node_modules\npm\node_modules\request\request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:943:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Windows_NT 6.2.9200
45 error command "C:\\Program Files (x86)\\nodejs\\\\node.exe" "C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error cwd D:\atma\utest-domtest
47 error node -v v0.10.32
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
