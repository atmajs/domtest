DomTest.config({
	report () {

	}
});
UTest({
	'shound find and miss in a component' (done) {
		var compo = mask.Compo.initialize(`
			div > input value=Foo;
			:utest {
				find (input) {
					val Foo;
				}
				find (section);
			}
		`);
		DomTest
			.compo(compo)
			.then(assert.avoid(done), (errors) => {
				eq_(errors.length, 1);
				has_(errors[0].message, 'section');
				done();
			})
	},

	'should render template and run assertions' () {
		var count = 0;
		DomTest.config({
			report: (error) => {
				assert.ifError(error);
				++count
			}
		});

		var template = `
			.foo {
				span > 'One'
				span > 'Two'
			}

			:utest {
				find (span) > length 2;
			}

			:utest {
				find (.foo) > prop tagName DIV;
			}
		`;

		return DomTest
			.compo(template)
			.done(() => {
				assert(count > 3);
			});
	}
});