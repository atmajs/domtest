DomTest.config({
	report () {

	}
});
UTest({
	'should once find and once miss an element' (done) {
		var dom = mask.render(`
			div > span
		`);
		var test = `
			find ('span');
			find('section');
		`;
		DomTest(dom, test)
			.then(assert.avoid(), (errors) => {
				eq_(errors.length, 1);
				has_(errors[0].message, 'section');
				done();
			});
	},
	'should once find and once miss an element in a context' (done) {
		var dom = mask.render(`
			div > span;
			section;
			span;
		`);
		var test = `
			find (div) > find ('span') > eq length 1;
			find (section) > find ('span') > eq length 0;
			hasNot footer;
			find (span) > eq length 1;
			filter (span) > eq length 1;
		`;
		DomTest(dom, test)
			.then(assert.avoid(), (errors) => {
				eq_(errors.length, 1);
				has_(errors[0].message, 'span');
				done();
			});
	},
	'should once find and once miss closest parent' (done) {
		var frag = mask.render(`
			div > span > footer
		`);
		var test = `
			find ('footer') > closest('div') > eq length 1;
			find ('footer') > closest('section') > eq length 0;
		`;
		DomTest(frag, test)
			.then(assert.avoid(), (errors) => {
				eq_(errors.length, 1);
				has_(errors[0].message, 'section');
				done();
			});
	}
})