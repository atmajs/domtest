
UTest({
	$config: {
		timeout: 4000
	},
	'`with` test' () {
		var div = mask.render(`
			div {
				section.foo > 'Foo';
				aside > span #Span;
			}
		`);
		
		DomTest(div, `
				
			with (section) {
				eq('text', 'Foo');
			}
			with (aside > span) {
				eq('attr', 'id', 'Span');
			}
			with (.foo) {
				eq('text', 'Foo');
				eq('prop', 'tagName', 'SECTION');
			}
		`);
	},
	
	'embeded javascript' (done) {
		var div = mask.render(`
			div > section > 'Foo'
		`);
		var tmpl = `
			eq('prop', 'tagName', 'DIV');
			
			find (section) {
				slot changeText ($el, assert) {
					$el.text('Baz');
					assert.equal(2, 2);
				}
				eq('text', 'Baz');
			}
		`;
		return DomTest(div, tmpl);
	},
	'await timeout' () {
		var div = mask.render('div');
		setTimeout(function(){
			$(div).appendMask('section > "Baz"');
		}, 200);
		
		return DomTest(div, `
			await (400) {
				eq('text', 'Baz');
			}
		`);
	},
	'await element' () {
		var div = mask.render('div');
		setTimeout(function(){
			$(div).appendMask('section > "Baz"');
		}, 400);
		
		return DomTest(div, `
			await (section) {
				eq('text', 'Baz');
			}
		`);
	},
	'events test' () {
		var div = mask.render(`
			section {
				div {
					button > 'Foo'
				}
				input value=Foo;
			}
		`);
		
		var button =  $(div).find('button').get(0);
		// add native
		button.addEventListener('click', function(){
			this.textContent = 'Baz';
		}, false);
		
		var test = `
			with (button) {
				
				text('Foo');
				
				do click;
				text('Baz');
			}
			with (input) {
				val('Foo');
				
				call focus();
				do press('A');
				val('AFoo');
			}		
		`;
		
		var $d = $(div).appendTo('body');
		return DomTest(div, test).done(()=> $d.remove());
	},
	
	'call test' () {
		var div = mask.render(`
			div > 'Foo'
		`);
		var test = `
			text Foo;
			call text('Baz');
			text Baz;
		`;
		
		return DomTest(div, test);
	},
	
	'className test' () {
		var div = mask.render(`
			div.foo;
		`);
		var test = `
			hasClass foo;
			hasClass ('baz', false);
			
			call addClass('baz');
			hasClass ('baz');
		`;
		
		return DomTest(div, test);
	},
	
	'"select" test' () {
		var div = mask.render(`
			select .foo {
				option > 'A'
				option > 'B'
			}
		`);
		var test = `
			with (.foo) {
				prop('selectedIndex', 0);
				
				do select B;
				prop('selectedIndex', 1);
			}
		`;
		return DomTest(div, test);
	}
	
});