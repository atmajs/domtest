UTest({
	$config: {
		timeout: 4000
	},
	'should traverse elements using `with`' () {
		var template = `
			div {
				section.foo > 'Foo';
				aside > span #Span;
			}
		`;
		var test = `
			with (section) {
				eq('text', 'Foo');
			}
			with (aside > span) {
				attr ('id', 'Span');
			}
			with (.foo) {
				has text Fo;
				attr class foo;
			}
		`;

		return Utils
			.countSuccess(template, test)
			.done(count => eq_(count, 7));
	},

	'should evaluate javascript function' () {
		var template = `
			div > section > 'Foo'
		`;
		var test = `
			tag div;
			find (section) {
				function changeText ($el, assert) {
					$el.text('Baz');
					assert.equal(2, 2);
				}
				eq ('text', 'Baz');
			}
		`;
		return Utils
			.countSuccess(template, test)
			.done(count => eq_(count, 4));
	},
	'should wait some time' () {
		var div = mask.jmask('div');
		var test = `
			await (300) {
				text Baz;
			}
		`;
		setTimeout(() =>
			div.append('section > "Baz"')
		, 150);

		return Utils
			.countSuccess(div, test)
			.done(count => eq_(count, 1));

	},
	'should await for an element' () {
		var div = mask.jmask('div');
		var test = `
			await (section) {
				eq('text', 'Baz');
			}
		`;
		setTimeout(() =>
			div.append('section > "Baz"')
		, 400);

		return Utils
			.countSuccess(div, test)
			/* `await` checks for the element and also causes an assertion */
			.done(count => eq_(count, 2));
	},

	'should call function on context' () {
		var template = `
			div > 'Foo'
		`;
		var test = `
			text Foo;
			call text('Baz');
			text Baz;
		`;
		return Utils
			.countSuccess(template, test)
			.done(count => eq_(count, 2));
	},

	'should assert class names' () {
		var template = `
			.foo;
		`;
		var test = `
			hasClass foo;
			hasClass ('baz', false);

			call addClass('baz');
			hasClass ('baz');
		`;
		return Utils
			.countSuccess(template, test)
			.done(count => eq_(count, 3));
	}

});