DomTest.config({
	report () {

	}
});
UTest({
	'should once find and once miss an element' (done) {

		var test = `
			find ('span');
			find ('section');
		`;
		DomTest
			.use('selenium')
			.process('/test/selenium/html/foo.html', test)
			.then(assert.avoid(), (errors) => {
				eq_(errors.length, 1);
				has_(errors[0].message, 'section');
				done();
			});
	},
	'should once find and once miss an element in a context' (done) {
		var test = `
			find ('body > *') {
				eq length 3;
				find (div) > find ('span') > eq length 1;
				find (section) > find ('span') > eq length 0;
				find (span) > eq length 1;
				filter (span) > eq length 1;
			}
		`;
		DomTest
			.use('selenium')
			.process('/test/selenium/html/bar.html', test)
			.then(assert.avoid(), (errors) => {
				eq_(errors.length, 1);
				has_(errors[0].message, 'span');
				done();
			});
	},
	'should once find and once miss closest parent' (done) {
		var test = `
			find ('footer') > closest('div') > eq length 1;
			find ('footer') > closest('section') > eq length 0;
		`;
		DomTest
			.use('selenium')
			.process('/test/selenium/html/traverse_closest.html', test)
			.then(assert.avoid(), (errors) => {
				eq_(errors.length, 1);
				has_(errors[0].message, 'section');
				done();
			});
	},

	'should request remote, find input and miss an element' (done) {
		var test = `
			find (input);
			find ('#trambam')
		`;
		DomTest
			.use('selenium')
			.process('http://google.com', test)
			.then(assert.avoid(), (errors) => {
				eq_(errors.length, 1);
				has_(errors[0].message, 'trambam');
				done();
			});
	}
})